" custom commands

fu! s:utils_lash()
	retu &ssl || !exists('+ssl') ? '/' : '\'
endf

let s:lash = s:utils_lash()

fu! s:getparent(item)
    let parent = substitute(a:item, '[\/][^\/]\+[\/:]\?$', '', '')
    if parent == '' || parent !~ '[\/]'
        let parent .= s:lash
    en
    retu parent
endf

fu! s:find_root(path, file)
   let l:fullPath = a:path . s:lash . a:file
   if filereadable(fullPath)
       return a:path
   elsei a:path == s:lash
       return getcwd()
   else
       return s:find_root(s:getparent(a:path), a:file)
   en
endf

fu! s:scons_func(...)
    let l:makeprg_bak = &makeprg
    setlocal makeprg=scons
    let l:make_path = s:find_root(getcwd(), "SConstruct")
    execute "make -C " . make_path . " " . join(a:000)
    let &makeprg=makeprg_bak
endf
command! -complete=dir -nargs=* Scons call s:scons_func('<args>')

"key mapping
nnoremap <C-B> :Scons -j20 mode=debug <CR>


" output shell command to new window
command! -complete=shellcmd -nargs=+ Shell call s:RunShellCommand(<q-args>)
function! s:RunShellCommand(cmdline)
  echo a:cmdline
  let expanded_cmdline = a:cmdline
  for part in split(a:cmdline, ' ')
     if part[0] =~ '\v[%#<]'
        let expanded_part = fnameescape(expand(part))
        let expanded_cmdline = substitute(expanded_cmdline, part, expanded_part, '')
     endif
  endfor
  botright new
  setlocal buftype=nofile bufhidden=wipe nobuflisted noswapfile nowrap
  call setline(1, 'You entered:    ' . a:cmdline)
  call setline(2, 'Expanded Form:  ' .expanded_cmdline)
  call setline(3,substitute(getline(2),'.','=','g'))
  execute '$read !'. expanded_cmdline
  setlocal nomodifiable
  1
endfunction
